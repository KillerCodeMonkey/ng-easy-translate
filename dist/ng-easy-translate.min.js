"use strict";angular.module("ngEasyTranslate",[]),angular.module("ngEasyTranslate").filter("translate",["$parse","$easyTranslate",function(n,t){var e=function(e){var a=t.getActiveDictionary();return Object.keys(a).length?n(e)(a):e};return e.$stateful=!0,e}]),angular.module("ngEasyTranslate").provider("$easyTranslate",[function(){var n=[],t=null,e={},a=null;this.setLanguages=function(t){n=t},this.setDictFolder=function(n){t=n},this.$get=["$rootScope","$window","$http","$q",function(r,u,o,i){return{getBrowserLanguage:function(){return u.navigator.language.toLowerCase().substring(0,2)},setActiveLanguage:function(u){var s=a;return u===a?i.resolve(e):-1===n.indexOf(u)?(a=n[0],i.reject("Unknown locale: "+u)):(a=u,o.get(t+"/"+u+".dict.json",{cache:!0}).then(function(n){return e=n.data,r.$broadcast("$easyTranslate.changed",a,e),e},function(n){return a=s,console.error("Can not request dictionary",n),i.reject(n)}))},getActiveLanguage:function(){return a},getActiveDictionary:function(){return e}}}]}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLWVhc3ktdHJhbnNsYXRlLmpzIiwiZmlsdGVyL25nLWVhc3ktdHJhbnNsYXRlLmZpbHRlci5qcyIsInByb3ZpZGVyL25nLWVhc3ktdHJhbnNsYXRlLnByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJmaWx0ZXIiLCIkcGFyc2UiLCIkZWFzeVRyYW5zbGF0ZSIsInRyYW5zbGF0ZUZpbHRlciIsImRpY3RLZXkiLCJkaWN0IiwiZ2V0QWN0aXZlRGljdGlvbmFyeSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCIkc3RhdGVmdWwiLCJwcm92aWRlciIsImxhbmd1YWdlcyIsImRpY3RQYXRoIiwiYWN0aXZlRGljdGlvbmFyeSIsImFjdGl2ZUxhbmd1YWdlIiwidGhpcyIsInNldExhbmd1YWdlcyIsImxvY2FsZXMiLCJzZXREaWN0Rm9sZGVyIiwicGF0aCIsIiRnZXQiLCIkcm9vdFNjb3BlIiwiJHdpbmRvdyIsIiRodHRwIiwiJHEiLCJnZXRCcm93c2VyTGFuZ3VhZ2UiLCJuYXZpZ2F0b3IiLCJsYW5ndWFnZSIsInRvTG93ZXJDYXNlIiwic3Vic3RyaW5nIiwic2V0QWN0aXZlTGFuZ3VhZ2UiLCJsb2NhbGUiLCJvbGRBY3RpdmUiLCJyZXNvbHZlIiwiaW5kZXhPZiIsInJlamVjdCIsImdldCIsImNhY2hlIiwidGhlbiIsInJlcyIsImRhdGEiLCIkYnJvYWRjYXN0IiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZ2V0QWN0aXZlTGFuZ3VhZ2UiXSwibWFwcGluZ3MiOiJBQUFBLFlBRUFBLFNBQ0FDLE9BQUEsc0JDREFELFFBQ0FDLE9BQUEsbUJBQ0FDLE9BQUEsYUFDQSxTQUNBLGlCQUNBLFNBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUFILEVBQUFJLHFCQUVBLE9BQUFDLFFBQUFDLEtBQUFILEdBQUFJLE9BSUFSLEVBQUFHLEdBQUFDLEdBSEFELEVBUUEsT0FGQUQsR0FBQU8sV0FBQSxFQUVBUCxLQ2xCQUwsUUFDQUMsT0FBQSxtQkFDQVksU0FBQSxrQkFDQSxXQUNBLEdBQUFDLE1BQ0FDLEVBQUEsS0FDQUMsS0FDQUMsRUFBQSxJQUVBQyxNQUFBQyxhQUFBLFNBQUFDLEdBQ0FOLEVBQUFNLEdBR0FGLEtBQUFHLGNBQUEsU0FBQUMsR0FDQVAsRUFBQU8sR0FHQUosS0FBQUssTUFBQSxhQUFBLFVBQUEsUUFBQSxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FDQUMsbUJBQUEsV0FDQSxNQUFBSCxHQUFBSSxVQUFBQyxTQUFBQyxjQUFBQyxVQUFBLEVBQUEsSUFFQUMsa0JBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBbEIsQ0FFQSxPQUFBaUIsS0FBQWpCLEVBQ0FVLEVBQUFTLFFBQUFwQixHQUdBLEtBQUFGLEVBQUF1QixRQUFBSCxJQUNBakIsRUFBQUgsRUFBQSxHQUNBYSxFQUFBVyxPQUFBLG1CQUFBSixLQUVBakIsRUFBQWlCLEVBR0FSLEVBQ0FhLElBQUF4QixFQUFBLElBQUFtQixFQUFBLGNBQ0FNLE9BQUEsSUFFQUMsS0FBQSxTQUFBQyxHQUlBLE1BSEExQixHQUFBMEIsRUFBQUMsS0FDQW5CLEVBQUFvQixXQUFBLHlCQUFBM0IsRUFBQUQsR0FFQUEsR0FDQSxTQUFBNkIsR0FJQSxNQUhBNUIsR0FBQWtCLEVBQ0FXLFFBQUFDLE1BQUEsNkJBQUFGLEdBRUFsQixFQUFBVyxPQUFBTyxPQUdBRyxrQkFBQSxXQUNBLE1BQUEvQixJQUVBVCxvQkFBQSxXQUNBLE1BQUFRIiwiZmlsZSI6Im5nLWVhc3ktdHJhbnNsYXRlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ25nRWFzeVRyYW5zbGF0ZScsIFtdKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ25nRWFzeVRyYW5zbGF0ZScpXG4gICAgLmZpbHRlcigndHJhbnNsYXRlJywgW1xuICAgICAgICAnJHBhcnNlJyxcbiAgICAgICAgJyRlYXN5VHJhbnNsYXRlJyxcbiAgICAgICAgZnVuY3Rpb24gKCRwYXJzZSwgJGVhc3lUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVGaWx0ZXIgPSBmdW5jdGlvbiAoZGljdEtleSkge1xuICAgICAgICAgICAgICAgIHZhciBkaWN0ID0gJGVhc3lUcmFuc2xhdGUuZ2V0QWN0aXZlRGljdGlvbmFyeSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhkaWN0KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpY3RLZXk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuICRwYXJzZShkaWN0S2V5KShkaWN0KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRyYW5zbGF0ZUZpbHRlci4kc3RhdGVmdWwgPSB0cnVlO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlRmlsdGVyO1xuICAgICAgICB9XG4gICAgXSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCduZ0Vhc3lUcmFuc2xhdGUnKVxuICAgIC5wcm92aWRlcignJGVhc3lUcmFuc2xhdGUnLCBbXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBsYW5ndWFnZXMgPSBbXSxcbiAgICAgICAgICAgICAgICBkaWN0UGF0aCA9IG51bGwsXG4gICAgICAgICAgICAgICAgYWN0aXZlRGljdGlvbmFyeSA9IHt9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZUxhbmd1YWdlID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5zZXRMYW5ndWFnZXMgPSBmdW5jdGlvbiAobG9jYWxlcykge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlcyA9IGxvY2FsZXM7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnNldERpY3RGb2xkZXIgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICAgICAgICAgIGRpY3RQYXRoID0gcGF0aDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuJGdldCA9ICBbJyRyb290U2NvcGUnLCAnJHdpbmRvdycsICckaHR0cCcsICckcScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkd2luZG93LCAkaHR0cCwgJHEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBnZXRCcm93c2VyTGFuZ3VhZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkd2luZG93Lm5hdmlnYXRvci5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZygwLCAyKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlTGFuZ3VhZ2U6IGZ1bmN0aW9uIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGRBY3RpdmUgPSBhY3RpdmVMYW5ndWFnZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsZSA9PT0gYWN0aXZlTGFuZ3VhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVzb2x2ZShhY3RpdmVEaWN0aW9uYXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBkZWZhdWx0IGxhbmd1YWdlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2VzLmluZGV4T2YobG9jYWxlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVMYW5ndWFnZSA9IGxhbmd1YWdlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdVbmtub3duIGxvY2FsZTogJyArIGxvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUxhbmd1YWdlID0gbG9jYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0KGRpY3RQYXRoICsgJy8nICsgbG9jYWxlICsgJy5kaWN0Lmpzb24nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURpY3Rpb25hcnkgPSByZXMuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckZWFzeVRyYW5zbGF0ZS5jaGFuZ2VkJywgYWN0aXZlTGFuZ3VhZ2UsIGFjdGl2ZURpY3Rpb25hcnkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3RpdmVEaWN0aW9uYXJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlTGFuZ3VhZ2UgPSBvbGRBY3RpdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NhbiBub3QgcmVxdWVzdCBkaWN0aW9uYXJ5JywgZXJyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEFjdGl2ZUxhbmd1YWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZlTGFuZ3VhZ2U7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldEFjdGl2ZURpY3Rpb25hcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3RpdmVEaWN0aW9uYXJ5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1dO1xuICAgICAgICB9XG4gICAgXSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
